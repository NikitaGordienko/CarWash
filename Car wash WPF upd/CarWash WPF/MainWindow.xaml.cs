using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CarWash_WPF
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        // Стандартные SQL-запросы на вывод всех данных
        private readonly string ShowAllClientsQuery = @"SELECT * FROM client";
        private readonly string ShowAllAppointmentsQuery = @"SELECT * FROM appointment"; //`appointment_id`,`client_id`,`appointment_time`,`appointment_date`, `car_type`,`interior_cleaning`,`diagnostics`,`price`
        private readonly string ShowAllFeedbackQuery = @"SELECT * FROM review";
        private DataSet DS = new DataSet("Carwash");

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                //Создание объектов DataTable
                DataTable ClientsDT = Database.CreateDataTable(ShowAllClientsQuery);
                ClientsDT.TableName = "client";
                DataTable AppointmentsDT = Database.CreateDataTable(ShowAllAppointmentsQuery);
                AppointmentsDT.TableName = "appointment";
                DataTable FeedbackDT = Database.CreateDataTable(ShowAllFeedbackQuery);
                FeedbackDT.TableName = "review";

                // Добавление таблиц в объект DataSet
                DS.Tables.Add(ClientsDT);
                DS.Tables.Add(AppointmentsDT);
                DS.Tables.Add(FeedbackDT);
                DGClients.ItemsSource = DS.Tables[0].DefaultView;
                DGAppointments.ItemsSource = DS.Tables[1].DefaultView;
                DGFeedback.ItemsSource = DS.Tables[2].DefaultView;

                btnApplyClientChanges.Visibility = Visibility.Hidden;
                btnApplyAppointmentChanges.Visibility = Visibility.Hidden;
                btnApplyFeedbackChanges.Visibility = Visibility.Hidden;
            }
            catch (Exception e)
            {
                string temp = e.Message;
                MessageBox.Show($"Невозможно подключиться к базе данных. \nПожалуйста, обратитесь к администратору.\nError: {e.Message}", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }        

        //private void RefreshDGClients()
        //{
        //    DGClients.ItemsSource = null;
        //    DataTable ClientsDT = Database.CreateDataTable(ShowAllClientsQuery);
        //    DGClients.ItemsSource = DS.Tables[0].DefaultView;
        //    btnApplyClientChanges.Visibility = Visibility.Hidden;
        //}

        private void MainMenuWindow_Loaded(object sender, RoutedEventArgs e)
        {
            //Попытка привести даты к формату дд.мм.гг
            //for (int i = 0; i < DS.Tables[1].Rows.Count; i++)
            //{
            //    DS.Tables[1].Rows[i].BeginEdit();
            //    DateTime tempDate = (DateTime)DS.Tables[1].Rows[i].Field<object>(3);
            //    string tempDateString = tempDate.ToShortDateString();
            //    MessageBox.Show($"{tempDateString}");
            //    DS.Tables[1].Rows[i].SetField(3, tempDateString);
            //    DS.Tables[1].Rows[i].AcceptChanges();
            //    MessageBox.Show($"{DS.Tables[1].Rows[i].Field<object>(3)}");
            //}

            // Настройка отображения DGV элементов
            DGClients.CanUserResizeColumns = false;
            DGClients.IsReadOnly = true;
            DGAppointments.CanUserResizeColumns = false;
            DGAppointments.IsReadOnly = true;
            DGFeedback.CanUserResizeColumns = false;
            DGFeedback.IsReadOnly = true;
        }

        private void DGClients_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DGClients.Columns[0].Header = "Номер клиента";
            DGClients.Columns[1].Header = "Имя";
            DGClients.Columns[2].Header = "Номер телефона";
            DGClients.Columns[3].Header = "Email";
            DGClients.Columns[4].Header = "Комментарий о клиенте";
        }

        private void DGAppointments_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DGAppointments.Columns[0].Header = "Номер записи";
            DGAppointments.Columns[1].Header = "Номер клиента";
            DGAppointments.Columns[2].Header = "Время";
            DGAppointments.Columns[3].Header = "Дата";
            DGAppointments.Columns[4].Header = "Номер бокса";
            DGAppointments.Columns[5].Header = "Класс автомобиля";
            DGAppointments.Columns[6].Header = "Химчистка салона";
            DGAppointments.Columns[7].Header = "Диагностика";
            DGAppointments.Columns[8].Header = "Цена";
        }

        private void DGFeedback_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DGFeedback.Columns[0].Header = "Номер записи";
            DGFeedback.Columns[1].Header = "Номер клиента";
            DGFeedback.Columns[2].Header = "Оценка";
            DGFeedback.Columns[3].Header = "Комментарий";
        }
        private void btnClients_Click(object sender, RoutedEventArgs e)
        {
            tabClients.IsSelected = true;
        }

        private void btnAppointments_Click(object sender, RoutedEventArgs e)
        {
            tabAppointments.IsSelected = true;
        }

        private void btnFeedback_Click(object sender, RoutedEventArgs e)
        {
            tabFeedback.IsSelected = true;
        }

        private void btnReports_Click(object sender, RoutedEventArgs e)
        {
            ReportsWindow rw = new ReportsWindow(DS);
            rw.ShowDialog();
        }

        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
                this.DragMove();
        }

        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }


        List<string> queryList = new List<string>();
        private void btnChangeClients_Click(object sender, RoutedEventArgs e)
        {
            btnApplyClientChanges.Visibility = Visibility.Visible;
            DGClients.IsReadOnly = false;           
            DGClients.Columns[0].IsReadOnly = true;
            DGClients.Columns[1].IsReadOnly = true;
        }

        private void btnApplyClientChanges_Click(object sender, RoutedEventArgs e)
        {      
            int currentRowIndex = DGClients.SelectedIndex;    
            string updateQuery = Database.FormChangeRecordQuery(DS.Tables[0], DS.Tables[0], currentRowIndex, false);
            queryList.Add(updateQuery);
        }

        private void btnDeleteClients_Click(object sender, RoutedEventArgs e)
        {
            int currentRowIndex = DGClients.SelectedIndex;
            string deleteQuery = Database.FormDeleteRecordQuery(DS.Tables[0], DS.Tables[0], currentRowIndex);
            queryList.Add(deleteQuery);
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            int xx = queryList.Count;
            queryList = Database.EliminateQueryInconsistency(queryList);
           
            //for (int i = 0; i < queryList.Count; i++)
            //{
            //    Database.ExecuteWriter(queryList[i]);
            //}
            for (int i = 0; i < queryList.Count; i++)
            {
                MessageBox.Show(queryList[i]);
                Database.ExecuteWriter(queryList[i]);
            }
        }



        private void btnChangeAppointments_Click(object sender, RoutedEventArgs e)
        {
            btnApplyAppointmentChanges.Visibility = Visibility.Visible;
            DGAppointments.IsReadOnly = false;
            DGAppointments.Columns[0].IsReadOnly = true;
            DGAppointments.Columns[1].IsReadOnly = true;
            DGAppointments.Columns[3].IsReadOnly = true;
        }

        private void btnApplyAppointmentChanges_Click(object sender, RoutedEventArgs e)
        {
            int currentRowIndex = DGAppointments.SelectedIndex;
            string updateQuery = Database.FormChangeRecordQuery(DS.Tables[1], DS.Tables[1], currentRowIndex, true); 
            MessageBox.Show(updateQuery);
            Database.ExecuteWriter(updateQuery);
        }

        private void btnDeleteAppointments_Click(object sender, RoutedEventArgs e)
        {
            int currentRowIndex = DGAppointments.SelectedIndex;
            string deleteQuery = Database.FormDeleteRecordQuery(DS.Tables[1], DS.Tables[1], currentRowIndex);   
            Database.ExecuteWriter(deleteQuery);
        }

        private void btnChangeFeedback_Click(object sender, RoutedEventArgs e)
        {
            btnApplyFeedbackChanges.Visibility = Visibility.Visible;
            DGFeedback.IsReadOnly = false;
            DGFeedback.Columns[0].IsReadOnly = true;
            DGFeedback.Columns[1].IsReadOnly = true;
        }

        private void btnApplyFeedbackChanges_Click(object sender, RoutedEventArgs e) 
        {
            int currentRowIndex = DGFeedback.SelectedIndex;
            string updateQuery = Database.FormChangeRecordQuery(DS.Tables[2], DS.Tables[1], currentRowIndex, false); //appointment_id  и client_id не меняется
            MessageBox.Show(updateQuery);
            Database.ExecuteWriter(updateQuery);
        }

        private void btnDeleteFeedback_Click(object sender, RoutedEventArgs e)
        {
            int currentRowIndex = DGFeedback.SelectedIndex;
            string deleteQuery = Database.FormDeleteRecordQuery(DS.Tables[2], DS.Tables[1], currentRowIndex); //второй передаваемый параметр -> DS.Tables[1], т.к. при удалении из таблицы REVIEW требует appointment_id
            Database.ExecuteWriter(deleteQuery);
        }

        
    }
}
